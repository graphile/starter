/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  /** 
 * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
 **/
  Datetime: string,
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any,
  JSON: { [key: string]: any },
};

/** All input for the `changePassword` mutation. */
export type ChangePasswordInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  newPassword: Scalars['String'],
  oldPassword: Scalars['String'],
};

/** The output of our `changePassword` mutation. */
export type ChangePasswordPayload = {
  __typename?: 'ChangePasswordPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  success?: Maybe<Scalars['Boolean']>,
};

/** All input for the `confirmAccountDeletion` mutation. */
export type ConfirmAccountDeletionInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  token: Scalars['String'],
};

/** The output of our `confirmAccountDeletion` mutation. */
export type ConfirmAccountDeletionPayload = {
  __typename?: 'ConfirmAccountDeletionPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  success?: Maybe<Scalars['Boolean']>,
};

/** All input for the create `UserEmail` mutation. */
export type CreateUserEmailInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** The `UserEmail` to be created by this mutation. */
  userEmail: UserEmailInput,
};

/** The output of our create `UserEmail` mutation. */
export type CreateUserEmailPayload = {
  __typename?: 'CreateUserEmailPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  /** Reads a single `User` that is related to this `UserEmail`. */
  user?: Maybe<User>,
  /** The `UserEmail` that was created by this mutation. */
  userEmail?: Maybe<UserEmail>,
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  userEmailEdge?: Maybe<UserEmailsEdge>,
};


/** The output of our create `UserEmail` mutation. */
export type CreateUserEmailPayloadUserEmailEdgeArgs = {
  orderBy?: Maybe<Array<UserEmailsOrderBy>>
};



/** All input for the `deleteUserAuthentication` mutation. */
export type DeleteUserAuthenticationInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

/** The output of our delete `UserAuthentication` mutation. */
export type DeleteUserAuthenticationPayload = {
  __typename?: 'DeleteUserAuthenticationPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  deletedUserAuthenticationNodeId?: Maybe<Scalars['ID']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  /** Reads a single `User` that is related to this `UserAuthentication`. */
  user?: Maybe<User>,
  /** The `UserAuthentication` that was deleted by this mutation. */
  userAuthentication?: Maybe<UserAuthentication>,
};

/** All input for the `deleteUserEmail` mutation. */
export type DeleteUserEmailInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

/** The output of our delete `UserEmail` mutation. */
export type DeleteUserEmailPayload = {
  __typename?: 'DeleteUserEmailPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  deletedUserEmailNodeId?: Maybe<Scalars['ID']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  /** Reads a single `User` that is related to this `UserEmail`. */
  user?: Maybe<User>,
  /** The `UserEmail` that was deleted by this mutation. */
  userEmail?: Maybe<UserEmail>,
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  userEmailEdge?: Maybe<UserEmailsEdge>,
};


/** The output of our delete `UserEmail` mutation. */
export type DeleteUserEmailPayloadUserEmailEdgeArgs = {
  orderBy?: Maybe<Array<UserEmailsOrderBy>>
};

/** All input for the `deleteUser` mutation. */
export type DeleteUserInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Unique identifier for the user. */
  id: Scalars['Int'],
};

/** The output of our delete `User` mutation. */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  deletedUserNodeId?: Maybe<Scalars['ID']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  /** The `User` that was deleted by this mutation. */
  user?: Maybe<User>,
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>,
};


/** The output of our delete `User` mutation. */
export type DeleteUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>
};

/** All input for the `forgotPassword` mutation. */
export type ForgotPasswordInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
};

/** The output of our `forgotPassword` mutation. */
export type ForgotPasswordPayload = {
  __typename?: 'ForgotPasswordPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
};

export type LoginInput = {
  password: Scalars['String'],
  username: Scalars['String'],
};

export type LoginPayload = {
  __typename?: 'LoginPayload',
  user: User,
};

export type LogoutPayload = {
  __typename?: 'LogoutPayload',
  success?: Maybe<Scalars['Boolean']>,
};

/** All input for the `makeEmailPrimary` mutation. */
export type MakeEmailPrimaryInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  emailId?: Maybe<Scalars['Int']>,
};

/** The output of our `makeEmailPrimary` mutation. */
export type MakeEmailPrimaryPayload = {
  __typename?: 'MakeEmailPrimaryPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  /** Reads a single `User` that is related to this `UserEmail`. */
  user?: Maybe<User>,
  userEmail?: Maybe<UserEmail>,
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  userEmailEdge?: Maybe<UserEmailsEdge>,
};


/** The output of our `makeEmailPrimary` mutation. */
export type MakeEmailPrimaryPayloadUserEmailEdgeArgs = {
  orderBy?: Maybe<Array<UserEmailsOrderBy>>
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation',
  /** Enter your old password and a new password to change your password. */
  changePassword?: Maybe<ChangePasswordPayload>,
  /** 
 * If you're certain you want to delete your account, use
   * `requestAccountDeletion` to request an account deletion token, and then supply
   * the token through this mutation to complete account deletion.
 **/
  confirmAccountDeletion?: Maybe<ConfirmAccountDeletionPayload>,
  /** Creates a single `UserEmail`. */
  createUserEmail?: Maybe<CreateUserEmailPayload>,
  /** Deletes a single `User` using a unique key. */
  deleteUser?: Maybe<DeleteUserPayload>,
  /** Deletes a single `UserAuthentication` using a unique key. */
  deleteUserAuthentication?: Maybe<DeleteUserAuthenticationPayload>,
  /** Deletes a single `UserEmail` using a unique key. */
  deleteUserEmail?: Maybe<DeleteUserEmailPayload>,
  /** 
 * If you've forgotten your password, give us one of your email addresses and
   * we'll send you a reset token. Note this only works if you have added an email address!
 **/
  forgotPassword?: Maybe<ForgotPasswordPayload>,
  /** Use this mutation to log in to your account; this login uses sessions so you do not need to take further action. */
  login?: Maybe<LoginPayload>,
  /** Use this mutation to logout from your account. Don't forget to clear the client state! */
  logout?: Maybe<LogoutPayload>,
  /** 
 * Your primary email is where we'll notify of account events; other emails may
   * be used for discovery or login. Use this when you're changing your email address.
 **/
  makeEmailPrimary?: Maybe<MakeEmailPrimaryPayload>,
  /** Use this mutation to create an account on our system. This may only be used if you are logged out. */
  register?: Maybe<RegisterPayload>,
  /** Begin the account deletion flow by requesting the confirmation email */
  requestAccountDeletion?: Maybe<RequestAccountDeletionPayload>,
  /** 
 * If you didn't receive the verification code for this email, we can resend it.
   * We silently cap the rate of resends on the backend, so calls to this function
   * may not result in another email being sent if it has been called recently.
 **/
  resendEmailVerificationCode?: Maybe<ResendEmailVerificationCodePayload>,
  /** 
 * After triggering forgotPassword, you'll be sent a reset token. Combine this
   * with your user ID and a new password to reset your password.
 **/
  resetPassword?: Maybe<ResetPasswordPayload>,
  /** Updates a single `User` using a unique key and a patch. */
  updateUser?: Maybe<UpdateUserPayload>,
  /** 
 * Once you have received a verification token for your email, you may call this
   * mutation with that token to make your email verified.
 **/
  verifyEmail?: Maybe<VerifyEmailPayload>,
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationChangePasswordArgs = {
  input: ChangePasswordInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationConfirmAccountDeletionArgs = {
  input: ConfirmAccountDeletionInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserEmailArgs = {
  input: CreateUserEmailInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserArgs = {
  input: DeleteUserInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAuthenticationArgs = {
  input: DeleteUserAuthenticationInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserEmailArgs = {
  input: DeleteUserEmailInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationForgotPasswordArgs = {
  input: ForgotPasswordInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationLoginArgs = {
  input: LoginInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMakeEmailPrimaryArgs = {
  input: MakeEmailPrimaryInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterArgs = {
  input: RegisterInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestAccountDeletionArgs = {
  input: RequestAccountDeletionInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationResendEmailVerificationCodeArgs = {
  input: ResendEmailVerificationCodeInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationResetPasswordArgs = {
  input: ResetPasswordInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserArgs = {
  input: UpdateUserInput
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationVerifyEmailArgs = {
  input: VerifyEmailInput
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo',
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>,
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'],
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'],
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>,
};

/** The root query type which gives access points into the data universe. */
export type Query = {
  __typename?: 'Query',
  /** The currently logged in user (or null if not logged in). */
  currentUser?: Maybe<User>,
  /** 
 * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
 **/
  query: Query,
  user?: Maybe<User>,
  userAuthentication?: Maybe<UserAuthentication>,
  userByUsername?: Maybe<User>,
  userEmail?: Maybe<UserEmail>,
};


/** The root query type which gives access points into the data universe. */
export type QueryUserArgs = {
  id: Scalars['Int']
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAuthenticationArgs = {
  id: Scalars['Int']
};


/** The root query type which gives access points into the data universe. */
export type QueryUserByUsernameArgs = {
  username: Scalars['String']
};


/** The root query type which gives access points into the data universe. */
export type QueryUserEmailArgs = {
  id: Scalars['Int']
};

export type RegisterInput = {
  avatarUrl?: Maybe<Scalars['String']>,
  email: Scalars['String'],
  name?: Maybe<Scalars['String']>,
  password: Scalars['String'],
  username: Scalars['String'],
};

export type RegisterPayload = {
  __typename?: 'RegisterPayload',
  user: User,
};

/** All input for the `requestAccountDeletion` mutation. */
export type RequestAccountDeletionInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
};

/** The output of our `requestAccountDeletion` mutation. */
export type RequestAccountDeletionPayload = {
  __typename?: 'RequestAccountDeletionPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  success?: Maybe<Scalars['Boolean']>,
};

/** All input for the `resendEmailVerificationCode` mutation. */
export type ResendEmailVerificationCodeInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  emailId?: Maybe<Scalars['Int']>,
};

/** The output of our `resendEmailVerificationCode` mutation. */
export type ResendEmailVerificationCodePayload = {
  __typename?: 'ResendEmailVerificationCodePayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  success?: Maybe<Scalars['Boolean']>,
};

/** All input for the `resetPassword` mutation. */
export type ResetPasswordInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  newPassword: Scalars['String'],
  resetToken: Scalars['String'],
  userId: Scalars['Int'],
};

/** The output of our `resetPassword` mutation. */
export type ResetPasswordPayload = {
  __typename?: 'ResetPasswordPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  success?: Maybe<Scalars['Boolean']>,
};

/** The root subscription type: contains realtime events you can subscribe to with the `subscription` operation. */
export type Subscription = {
  __typename?: 'Subscription',
  /** Triggered when the logged in user's record is updated in some way. */
  currentUserUpdated?: Maybe<UserSubscriptionPayload>,
};

/** All input for the `updateUser` mutation. */
export type UpdateUserInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Unique identifier for the user. */
  id: Scalars['Int'],
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch,
};

/** The output of our update `User` mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  /** The `User` that was updated by this mutation. */
  user?: Maybe<User>,
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>,
};


/** The output of our update `User` mutation. */
export type UpdateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>
};

/** A user who can log in to the application. */
export type User = {
  __typename?: 'User',
  /** Optional avatar URL. */
  avatarUrl?: Maybe<Scalars['String']>,
  createdAt: Scalars['Datetime'],
  hasPassword?: Maybe<Scalars['Boolean']>,
  /** Unique identifier for the user. */
  id: Scalars['Int'],
  /** If true, the user has elevated privileges. */
  isAdmin: Scalars['Boolean'],
  isVerified: Scalars['Boolean'],
  /** Public-facing name (or pseudonym) of the user. */
  name?: Maybe<Scalars['String']>,
  updatedAt: Scalars['Datetime'],
  /** Reads and enables pagination through a set of `UserAuthentication`. */
  userAuthenticationsList: Array<UserAuthentication>,
  /** Reads and enables pagination through a set of `UserEmail`. */
  userEmails: UserEmailsConnection,
  /** Public-facing username (or 'handle') of the user. */
  username: Scalars['String'],
};


/** A user who can log in to the application. */
export type UserUserAuthenticationsListArgs = {
  condition?: Maybe<UserAuthenticationCondition>,
  first?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Array<UserAuthenticationsOrderBy>>
};


/** A user who can log in to the application. */
export type UserUserEmailsArgs = {
  after?: Maybe<Scalars['Cursor']>,
  before?: Maybe<Scalars['Cursor']>,
  condition?: Maybe<UserEmailCondition>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  orderBy?: Maybe<Array<UserEmailsOrderBy>>
};

/** Contains information about the login providers this user has used, so that they may disconnect them should they wish. */
export type UserAuthentication = {
  __typename?: 'UserAuthentication',
  createdAt: Scalars['Datetime'],
  id: Scalars['Int'],
  /** A unique identifier for the user within the login service. */
  identifier: Scalars['String'],
  /** The login service used, e.g. `twitter` or `github`. */
  service: Scalars['String'],
  updatedAt: Scalars['Datetime'],
  /** Reads a single `User` that is related to this `UserAuthentication`. */
  user?: Maybe<User>,
  userId: Scalars['Int'],
};

/** 
 * A condition to be used against `UserAuthentication` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 **/
export type UserAuthenticationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>,
  /** Checks for equality with the object’s `service` field. */
  service?: Maybe<Scalars['String']>,
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>,
};

/** Methods to use when ordering `UserAuthentication`. */
export enum UserAuthenticationsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ServiceAsc = 'SERVICE_ASC',
  ServiceDesc = 'SERVICE_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Information about a user's email address. */
export type UserEmail = {
  __typename?: 'UserEmail',
  createdAt: Scalars['Datetime'],
  /** The users email address, in `a@b.c` format. */
  email: Scalars['String'],
  id: Scalars['Int'],
  isPrimary: Scalars['Boolean'],
  /** 
 * True if the user has is_verified their email address (by clicking the link in
   * the email we sent them, or logging in with a social login provider), false otherwise.
 **/
  isVerified: Scalars['Boolean'],
  updatedAt: Scalars['Datetime'],
  /** Reads a single `User` that is related to this `UserEmail`. */
  user?: Maybe<User>,
  userId: Scalars['Int'],
};

/** 
 * A condition to be used against `UserEmail` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 **/
export type UserEmailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>,
  /** Checks for equality with the object’s `isPrimary` field. */
  isPrimary?: Maybe<Scalars['Boolean']>,
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>,
};

/** An input for mutations affecting `UserEmail` */
export type UserEmailInput = {
  /** The users email address, in `a@b.c` format. */
  email: Scalars['String'],
};

/** A connection to a list of `UserEmail` values. */
export type UserEmailsConnection = {
  __typename?: 'UserEmailsConnection',
  /** A list of edges which contains the `UserEmail` and cursor to aid in pagination. */
  edges: Array<UserEmailsEdge>,
  /** A list of `UserEmail` objects. */
  nodes: Array<UserEmail>,
  /** Information to aid in pagination. */
  pageInfo: PageInfo,
  /** The count of *all* `UserEmail` you could get from the connection. */
  totalCount: Scalars['Int'],
};

/** A `UserEmail` edge in the connection. */
export type UserEmailsEdge = {
  __typename?: 'UserEmailsEdge',
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>,
  /** The `UserEmail` at the end of the edge. */
  node: UserEmail,
};

/** Methods to use when ordering `UserEmail`. */
export enum UserEmailsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsPrimaryAsc = 'IS_PRIMARY_ASC',
  IsPrimaryDesc = 'IS_PRIMARY_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** Represents an update to a `User`. Fields that are set will be updated. */
export type UserPatch = {
  /** Optional avatar URL. */
  avatarUrl?: Maybe<Scalars['String']>,
  /** Public-facing name (or pseudonym) of the user. */
  name?: Maybe<Scalars['String']>,
  /** Public-facing username (or 'handle') of the user. */
  username?: Maybe<Scalars['String']>,
};

/** A `User` edge in the connection. */
export type UsersEdge = {
  __typename?: 'UsersEdge',
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>,
  /** The `User` at the end of the edge. */
  node: User,
};

/** Methods to use when ordering `User`. */
export enum UsersOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC'
}

export type UserSubscriptionPayload = {
  __typename?: 'UserSubscriptionPayload',
  event?: Maybe<Scalars['String']>,
  user?: Maybe<User>,
};

/** All input for the `verifyEmail` mutation. */
export type VerifyEmailInput = {
  /** 
 * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  token: Scalars['String'],
  userEmailId: Scalars['Int'],
};

/** The output of our `verifyEmail` mutation. */
export type VerifyEmailPayload = {
  __typename?: 'VerifyEmailPayload',
  /** 
 * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
 **/
  clientMutationId?: Maybe<Scalars['String']>,
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>,
  success?: Maybe<Scalars['Boolean']>,
};

export type AddEmailMutationVariables = {
  email: Scalars['String']
};


export type AddEmailMutation = ({ __typename?: 'Mutation' } & { createUserEmail: Maybe<({ __typename?: 'CreateUserEmailPayload' } & { user: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & { userEmails: ({ __typename?: 'UserEmailsConnection' } & { nodes: Array<({ __typename?: 'UserEmail' } & Pick<UserEmail, 'id'> & EmailsForm_UserEmailFragment)> }) })> })> });

export type ChangePasswordMutationVariables = {
  oldPassword: Scalars['String'],
  newPassword: Scalars['String']
};


export type ChangePasswordMutation = ({ __typename?: 'Mutation' } & { changePassword: Maybe<({ __typename?: 'ChangePasswordPayload' } & Pick<ChangePasswordPayload, 'success'>)> });

export type ConfirmAccountDeletionMutationVariables = {
  token: Scalars['String']
};


export type ConfirmAccountDeletionMutation = ({ __typename?: 'Mutation' } & { confirmAccountDeletion: Maybe<({ __typename?: 'ConfirmAccountDeletionPayload' } & Pick<ConfirmAccountDeletionPayload, 'success'>)> });

export type CurrentUserAuthenticationsQueryVariables = {};


export type CurrentUserAuthenticationsQuery = ({ __typename?: 'Query' } & { currentUser: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & { authentications: Array<({ __typename?: 'UserAuthentication' } & Pick<UserAuthentication, 'id' | 'service' | 'identifier' | 'createdAt'>)> })> });

export type CurrentUserUpdatedSubscriptionVariables = {};


export type CurrentUserUpdatedSubscription = ({ __typename?: 'Subscription' } & { currentUserUpdated: Maybe<({ __typename?: 'UserSubscriptionPayload' } & Pick<UserSubscriptionPayload, 'event'> & { user: Maybe<({ __typename?: 'User' } & Pick<User, 'id' | 'username' | 'name' | 'avatarUrl' | 'isAdmin' | 'isVerified'>)> })> });

export type DeleteEmailMutationVariables = {
  emailId: Scalars['Int']
};


export type DeleteEmailMutation = ({ __typename?: 'Mutation' } & { deleteUserEmail: Maybe<({ __typename?: 'DeleteUserEmailPayload' } & { user: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & { userEmails: ({ __typename?: 'UserEmailsConnection' } & { nodes: Array<({ __typename?: 'UserEmail' } & Pick<UserEmail, 'id'> & EmailsForm_UserEmailFragment)> }) })> })> });

export type EmailsForm_UserFragment = ({ __typename?: 'User' } & Pick<User, 'id'> & { userEmails: ({ __typename?: 'UserEmailsConnection' } & { nodes: Array<({ __typename?: 'UserEmail' } & Pick<UserEmail, 'id' | 'email' | 'isVerified'> & EmailsForm_UserEmailFragment)> }) });

export type EmailsForm_UserEmailFragment = ({ __typename?: 'UserEmail' } & Pick<UserEmail, 'id' | 'email' | 'isVerified' | 'isPrimary' | 'createdAt'>);

export type ForgotPasswordMutationVariables = {
  email: Scalars['String']
};


export type ForgotPasswordMutation = ({ __typename?: 'Mutation' } & { forgotPassword: Maybe<({ __typename?: 'ForgotPasswordPayload' } & Pick<ForgotPasswordPayload, 'clientMutationId'>)> });

export type LoginMutationVariables = {
  username: Scalars['String'],
  password: Scalars['String']
};


export type LoginMutation = ({ __typename?: 'Mutation' } & { login: Maybe<({ __typename?: 'LoginPayload' } & { user: ({ __typename?: 'User' } & Pick<User, 'id' | 'username' | 'name'>) })> });

export type LogoutMutationVariables = {};


export type LogoutMutation = ({ __typename?: 'Mutation' } & { logout: Maybe<({ __typename?: 'LogoutPayload' } & Pick<LogoutPayload, 'success'>)> });

export type MakeEmailPrimaryMutationVariables = {
  emailId: Scalars['Int']
};


export type MakeEmailPrimaryMutation = ({ __typename?: 'Mutation' } & { makeEmailPrimary: Maybe<({ __typename?: 'MakeEmailPrimaryPayload' } & { user: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & { userEmails: ({ __typename?: 'UserEmailsConnection' } & { nodes: Array<({ __typename?: 'UserEmail' } & Pick<UserEmail, 'id' | 'isPrimary'>)> }) })> })> });

export type ProfileSettingsForm_UserFragment = ({ __typename?: 'User' } & Pick<User, 'id' | 'name' | 'username' | 'avatarUrl'>);

export type RegisterMutationVariables = {
  username: Scalars['String'],
  password: Scalars['String'],
  email: Scalars['String'],
  name?: Maybe<Scalars['String']>
};


export type RegisterMutation = ({ __typename?: 'Mutation' } & { register: Maybe<({ __typename?: 'RegisterPayload' } & { user: ({ __typename?: 'User' } & Pick<User, 'id' | 'username' | 'name'>) })> });

export type RequestAccountDeletionMutationVariables = {};


export type RequestAccountDeletionMutation = ({ __typename?: 'Mutation' } & { requestAccountDeletion: Maybe<({ __typename?: 'RequestAccountDeletionPayload' } & Pick<RequestAccountDeletionPayload, 'success'>)> });

export type ResendEmailVerificationMutationVariables = {
  emailId: Scalars['Int']
};


export type ResendEmailVerificationMutation = ({ __typename?: 'Mutation' } & { resendEmailVerificationCode: Maybe<({ __typename?: 'ResendEmailVerificationCodePayload' } & Pick<ResendEmailVerificationCodePayload, 'success'>)> });

export type ResetPasswordMutationVariables = {
  userId: Scalars['Int'],
  token: Scalars['String'],
  password: Scalars['String']
};


export type ResetPasswordMutation = ({ __typename?: 'Mutation' } & { resetPassword: Maybe<({ __typename?: 'ResetPasswordPayload' } & Pick<ResetPasswordPayload, 'success'>)> });

export type SettingsEmailsQueryVariables = {};


export type SettingsEmailsQuery = ({ __typename?: 'Query' } & { currentUser: Maybe<({ __typename?: 'User' } & Pick<User, 'id' | 'isVerified'> & EmailsForm_UserFragment)> });

export type SettingsPasswordQueryVariables = {};


export type SettingsPasswordQuery = ({ __typename?: 'Query' } & { currentUser: Maybe<({ __typename?: 'User' } & Pick<User, 'id' | 'hasPassword'> & { userEmails: ({ __typename?: 'UserEmailsConnection' } & { nodes: Array<({ __typename?: 'UserEmail' } & Pick<UserEmail, 'id' | 'email'>)> }) })> });

export type SettingsProfileQueryVariables = {};


export type SettingsProfileQuery = ({ __typename?: 'Query' } & { currentUser: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & ProfileSettingsForm_UserFragment)> });

export type SharedLayoutQueryVariables = {};


export type SharedLayoutQuery = ({ __typename?: 'Query' } & { currentUser: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & SharedLayout_UserFragment)> });

export type SharedLayout_UserFragment = ({ __typename?: 'User' } & Pick<User, 'id' | 'name' | 'username' | 'avatarUrl' | 'isAdmin' | 'isVerified'>);

export type UnlinkUserAuthenticationMutationVariables = {
  id: Scalars['Int']
};


export type UnlinkUserAuthenticationMutation = ({ __typename?: 'Mutation' } & { deleteUserAuthentication: Maybe<({ __typename?: 'DeleteUserAuthenticationPayload' } & { user: Maybe<({ __typename?: 'User' } & Pick<User, 'id'> & { userAuthenticationsList: Array<({ __typename?: 'UserAuthentication' } & Pick<UserAuthentication, 'id' | 'identifier' | 'service' | 'createdAt'>)> })> })> });

export type UpdateUserMutationVariables = {
  id: Scalars['Int'],
  patch: UserPatch
};


export type UpdateUserMutation = ({ __typename?: 'Mutation' } & { updateUser: Maybe<({ __typename?: 'UpdateUserPayload' } & Pick<UpdateUserPayload, 'clientMutationId'> & { user: Maybe<({ __typename?: 'User' } & Pick<User, 'id' | 'name' | 'username'>)> })> });

export type VerifyEmailMutationVariables = {
  id: Scalars['Int'],
  token: Scalars['String']
};


export type VerifyEmailMutation = ({ __typename?: 'Mutation' } & { verifyEmail: Maybe<({ __typename?: 'VerifyEmailPayload' } & Pick<VerifyEmailPayload, 'success'> & { query: Maybe<({ __typename?: 'Query' } & { currentUser: Maybe<({ __typename?: 'User' } & Pick<User, 'id' | 'isVerified'>)> })> })> });

export const EmailsForm_UserEmailFragmentDoc = gql`
    fragment EmailsForm_UserEmail on UserEmail {
  id
  email
  isVerified
  isPrimary
  createdAt
}
    `;
export const EmailsForm_UserFragmentDoc = gql`
    fragment EmailsForm_User on User {
  id
  userEmails(first: 50) {
    nodes {
      ...EmailsForm_UserEmail
      id
      email
      isVerified
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`;
export const ProfileSettingsForm_UserFragmentDoc = gql`
    fragment ProfileSettingsForm_User on User {
  id
  name
  username
  avatarUrl
}
    `;
export const SharedLayout_UserFragmentDoc = gql`
    fragment SharedLayout_User on User {
  id
  name
  username
  avatarUrl
  isAdmin
  isVerified
}
    `;
export const AddEmailDocument = gql`
    mutation AddEmail($email: String!) {
  createUserEmail(input: {userEmail: {email: $email}}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          ...EmailsForm_UserEmail
        }
      }
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`;
export type AddEmailMutationFn = ApolloReactCommon.MutationFunction<AddEmailMutation, AddEmailMutationVariables>;

    export function useAddEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddEmailMutation, AddEmailMutationVariables>) {
      return ApolloReactHooks.useMutation<AddEmailMutation, AddEmailMutationVariables>(AddEmailDocument, baseOptions);
    };
export type AddEmailMutationHookResult = ReturnType<typeof useAddEmailMutation>;
export type AddEmailMutationResult = ApolloReactCommon.MutationResult<AddEmailMutation>;
export type AddEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<AddEmailMutation, AddEmailMutationVariables>;
export const ChangePasswordDocument = gql`
    mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  changePassword(input: {oldPassword: $oldPassword, newPassword: $newPassword}) {
    success
  }
}
    `;
export type ChangePasswordMutationFn = ApolloReactCommon.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;

    export function useChangePasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {
      return ApolloReactHooks.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, baseOptions);
    };
export type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;
export type ChangePasswordMutationResult = ApolloReactCommon.MutationResult<ChangePasswordMutation>;
export type ChangePasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;
export const ConfirmAccountDeletionDocument = gql`
    mutation ConfirmAccountDeletion($token: String!) {
  confirmAccountDeletion(input: {token: $token}) {
    success
  }
}
    `;
export type ConfirmAccountDeletionMutationFn = ApolloReactCommon.MutationFunction<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>;

    export function useConfirmAccountDeletionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>) {
      return ApolloReactHooks.useMutation<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>(ConfirmAccountDeletionDocument, baseOptions);
    };
export type ConfirmAccountDeletionMutationHookResult = ReturnType<typeof useConfirmAccountDeletionMutation>;
export type ConfirmAccountDeletionMutationResult = ApolloReactCommon.MutationResult<ConfirmAccountDeletionMutation>;
export type ConfirmAccountDeletionMutationOptions = ApolloReactCommon.BaseMutationOptions<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>;
export const CurrentUserAuthenticationsDocument = gql`
    query CurrentUserAuthentications {
  currentUser {
    id
    authentications: userAuthenticationsList(first: 50) {
      id
      service
      identifier
      createdAt
    }
  }
}
    `;

    export function useCurrentUserAuthenticationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>) {
      return ApolloReactHooks.useQuery<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>(CurrentUserAuthenticationsDocument, baseOptions);
    };
export type CurrentUserAuthenticationsQueryHookResult = ReturnType<typeof useCurrentUserAuthenticationsQuery>;
export type CurrentUserAuthenticationsQueryResult = ApolloReactCommon.QueryResult<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>;
export const CurrentUserUpdatedDocument = gql`
    subscription CurrentUserUpdated {
  currentUserUpdated {
    event
    user {
      id
      username
      name
      avatarUrl
      isAdmin
      isVerified
    }
  }
}
    `;

    export function useCurrentUserUpdatedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables>) {
      return ApolloReactHooks.useSubscription<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables>(CurrentUserUpdatedDocument, baseOptions);
    };
export type CurrentUserUpdatedSubscriptionHookResult = ReturnType<typeof useCurrentUserUpdatedSubscription>;
export type CurrentUserUpdatedSubscriptionResult = ApolloReactCommon.SubscriptionResult<CurrentUserUpdatedSubscription>;
export const DeleteEmailDocument = gql`
    mutation DeleteEmail($emailId: Int!) {
  deleteUserEmail(input: {id: $emailId}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          ...EmailsForm_UserEmail
        }
      }
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`;
export type DeleteEmailMutationFn = ApolloReactCommon.MutationFunction<DeleteEmailMutation, DeleteEmailMutationVariables>;

    export function useDeleteEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteEmailMutation, DeleteEmailMutationVariables>) {
      return ApolloReactHooks.useMutation<DeleteEmailMutation, DeleteEmailMutationVariables>(DeleteEmailDocument, baseOptions);
    };
export type DeleteEmailMutationHookResult = ReturnType<typeof useDeleteEmailMutation>;
export type DeleteEmailMutationResult = ApolloReactCommon.MutationResult<DeleteEmailMutation>;
export type DeleteEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteEmailMutation, DeleteEmailMutationVariables>;
export const ForgotPasswordDocument = gql`
    mutation ForgotPassword($email: String!) {
  forgotPassword(input: {email: $email}) {
    clientMutationId
  }
}
    `;
export type ForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;

    export function useForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {
      return ApolloReactHooks.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);
    };
export type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;
export type ForgotPasswordMutationResult = ApolloReactCommon.MutationResult<ForgotPasswordMutation>;
export type ForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;
export const LoginDocument = gql`
    mutation Login($username: String!, $password: String!) {
  login(input: {username: $username, password: $password}) {
    user {
      id
      username
      name
    }
  }
}
    `;
export type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;

    export function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
      return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);
    };
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;
export type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    success
  }
}
    `;
export type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;

    export function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
      return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);
    };
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const MakeEmailPrimaryDocument = gql`
    mutation MakeEmailPrimary($emailId: Int!) {
  makeEmailPrimary(input: {emailId: $emailId}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          isPrimary
        }
      }
    }
  }
}
    `;
export type MakeEmailPrimaryMutationFn = ApolloReactCommon.MutationFunction<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>;

    export function useMakeEmailPrimaryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>) {
      return ApolloReactHooks.useMutation<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>(MakeEmailPrimaryDocument, baseOptions);
    };
export type MakeEmailPrimaryMutationHookResult = ReturnType<typeof useMakeEmailPrimaryMutation>;
export type MakeEmailPrimaryMutationResult = ApolloReactCommon.MutationResult<MakeEmailPrimaryMutation>;
export type MakeEmailPrimaryMutationOptions = ApolloReactCommon.BaseMutationOptions<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>;
export const RegisterDocument = gql`
    mutation Register($username: String!, $password: String!, $email: String!, $name: String) {
  register(input: {username: $username, password: $password, email: $email, name: $name}) {
    user {
      id
      username
      name
    }
  }
}
    `;
export type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;

    export function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {
      return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);
    };
export type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;
export type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;
export type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;
export const RequestAccountDeletionDocument = gql`
    mutation RequestAccountDeletion {
  requestAccountDeletion(input: {}) {
    success
  }
}
    `;
export type RequestAccountDeletionMutationFn = ApolloReactCommon.MutationFunction<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>;

    export function useRequestAccountDeletionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>) {
      return ApolloReactHooks.useMutation<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>(RequestAccountDeletionDocument, baseOptions);
    };
export type RequestAccountDeletionMutationHookResult = ReturnType<typeof useRequestAccountDeletionMutation>;
export type RequestAccountDeletionMutationResult = ApolloReactCommon.MutationResult<RequestAccountDeletionMutation>;
export type RequestAccountDeletionMutationOptions = ApolloReactCommon.BaseMutationOptions<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>;
export const ResendEmailVerificationDocument = gql`
    mutation ResendEmailVerification($emailId: Int!) {
  resendEmailVerificationCode(input: {emailId: $emailId}) {
    success
  }
}
    `;
export type ResendEmailVerificationMutationFn = ApolloReactCommon.MutationFunction<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>;

    export function useResendEmailVerificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>) {
      return ApolloReactHooks.useMutation<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>(ResendEmailVerificationDocument, baseOptions);
    };
export type ResendEmailVerificationMutationHookResult = ReturnType<typeof useResendEmailVerificationMutation>;
export type ResendEmailVerificationMutationResult = ApolloReactCommon.MutationResult<ResendEmailVerificationMutation>;
export type ResendEmailVerificationMutationOptions = ApolloReactCommon.BaseMutationOptions<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>;
export const ResetPasswordDocument = gql`
    mutation ResetPassword($userId: Int!, $token: String!, $password: String!) {
  resetPassword(input: {userId: $userId, resetToken: $token, newPassword: $password}) {
    success
  }
}
    `;
export type ResetPasswordMutationFn = ApolloReactCommon.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;

    export function useResetPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {
      return ApolloReactHooks.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, baseOptions);
    };
export type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;
export type ResetPasswordMutationResult = ApolloReactCommon.MutationResult<ResetPasswordMutation>;
export type ResetPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;
export const SettingsEmailsDocument = gql`
    query SettingsEmails {
  currentUser {
    id
    isVerified
    ...EmailsForm_User
  }
}
    ${EmailsForm_UserFragmentDoc}`;

    export function useSettingsEmailsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>) {
      return ApolloReactHooks.useQuery<SettingsEmailsQuery, SettingsEmailsQueryVariables>(SettingsEmailsDocument, baseOptions);
    };
export type SettingsEmailsQueryHookResult = ReturnType<typeof useSettingsEmailsQuery>;
export type SettingsEmailsQueryResult = ApolloReactCommon.QueryResult<SettingsEmailsQuery, SettingsEmailsQueryVariables>;
export const SettingsPasswordDocument = gql`
    query SettingsPassword {
  currentUser {
    id
    hasPassword
    userEmails(first: 1, condition: {isPrimary: true}) {
      nodes {
        id
        email
      }
    }
  }
}
    `;

    export function useSettingsPasswordQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables>) {
      return ApolloReactHooks.useQuery<SettingsPasswordQuery, SettingsPasswordQueryVariables>(SettingsPasswordDocument, baseOptions);
    };
export type SettingsPasswordQueryHookResult = ReturnType<typeof useSettingsPasswordQuery>;
export type SettingsPasswordQueryResult = ApolloReactCommon.QueryResult<SettingsPasswordQuery, SettingsPasswordQueryVariables>;
export const SettingsProfileDocument = gql`
    query SettingsProfile {
  currentUser {
    id
    ...ProfileSettingsForm_User
  }
}
    ${ProfileSettingsForm_UserFragmentDoc}`;

    export function useSettingsProfileQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsProfileQuery, SettingsProfileQueryVariables>) {
      return ApolloReactHooks.useQuery<SettingsProfileQuery, SettingsProfileQueryVariables>(SettingsProfileDocument, baseOptions);
    };
export type SettingsProfileQueryHookResult = ReturnType<typeof useSettingsProfileQuery>;
export type SettingsProfileQueryResult = ApolloReactCommon.QueryResult<SettingsProfileQuery, SettingsProfileQueryVariables>;
export const SharedLayoutDocument = gql`
    query SharedLayout {
  currentUser {
    id
    ...SharedLayout_User
  }
}
    ${SharedLayout_UserFragmentDoc}`;

    export function useSharedLayoutQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SharedLayoutQuery, SharedLayoutQueryVariables>) {
      return ApolloReactHooks.useQuery<SharedLayoutQuery, SharedLayoutQueryVariables>(SharedLayoutDocument, baseOptions);
    };
export type SharedLayoutQueryHookResult = ReturnType<typeof useSharedLayoutQuery>;
export type SharedLayoutQueryResult = ApolloReactCommon.QueryResult<SharedLayoutQuery, SharedLayoutQueryVariables>;
export const UnlinkUserAuthenticationDocument = gql`
    mutation UnlinkUserAuthentication($id: Int!) {
  deleteUserAuthentication(input: {id: $id}) {
    user {
      id
      userAuthenticationsList(first: 50) {
        id
        identifier
        service
        createdAt
      }
    }
  }
}
    `;
export type UnlinkUserAuthenticationMutationFn = ApolloReactCommon.MutationFunction<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>;

    export function useUnlinkUserAuthenticationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>) {
      return ApolloReactHooks.useMutation<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>(UnlinkUserAuthenticationDocument, baseOptions);
    };
export type UnlinkUserAuthenticationMutationHookResult = ReturnType<typeof useUnlinkUserAuthenticationMutation>;
export type UnlinkUserAuthenticationMutationResult = ApolloReactCommon.MutationResult<UnlinkUserAuthenticationMutation>;
export type UnlinkUserAuthenticationMutationOptions = ApolloReactCommon.BaseMutationOptions<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($id: Int!, $patch: UserPatch!) {
  updateUser(input: {id: $id, patch: $patch}) {
    clientMutationId
    user {
      id
      name
      username
    }
  }
}
    `;
export type UpdateUserMutationFn = ApolloReactCommon.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

    export function useUpdateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
      return ApolloReactHooks.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, baseOptions);
    };
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = ApolloReactCommon.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const VerifyEmailDocument = gql`
    mutation VerifyEmail($id: Int!, $token: String!) {
  verifyEmail(input: {userEmailId: $id, token: $token}) {
    success
    query {
      currentUser {
        id
        isVerified
      }
    }
  }
}
    `;
export type VerifyEmailMutationFn = ApolloReactCommon.MutationFunction<VerifyEmailMutation, VerifyEmailMutationVariables>;

    export function useVerifyEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<VerifyEmailMutation, VerifyEmailMutationVariables>) {
      return ApolloReactHooks.useMutation<VerifyEmailMutation, VerifyEmailMutationVariables>(VerifyEmailDocument, baseOptions);
    };
export type VerifyEmailMutationHookResult = ReturnType<typeof useVerifyEmailMutation>;
export type VerifyEmailMutationResult = ApolloReactCommon.MutationResult<VerifyEmailMutation>;
export type VerifyEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<VerifyEmailMutation, VerifyEmailMutationVariables>;