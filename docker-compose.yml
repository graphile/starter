services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_UID: $UID
        SETUP_MODE: normal

    # On Linux, this will prevent new files getting created as root, but you
    # may need to update the USER_UID and USER_GID in `Dockerfile` to match
    # your user if not 1000.
    user: $UID

    env_file:
      - docker/.env
    volumes:
      - .:/work
      # let's us run docker & docker compose from inside container (used for yarn setup)
      - /var/run/docker.sock:/var/run/docker.sock
      - nm_root:/work/node_modules
      - nm_app_client:/work/@app/client/node_modules
      - nm_app_config:/work/@app/config/node_modules
      - nm_app_db:/work/@app/db/node_modules
      - nm_app_e2e:/work/@app/e2e/node_modules
      - nm_app_graphql:/work/@/appgraphqlgenerated/node_modules
      - nm_app_server:/work/@app/server/node_modules
      - nm_app_worker:/work/@app/worker/node_modules
    working_dir: /work
    ports:
      # The main server
      - "5678:5678"
      # Node `--inspect=...` port numbers for debugging
      - "9678:9678"
      - "9876:9876"
      - "9757:9757"
    depends_on:
      - db
    command: sh -c "./docker/scripts/lsfix.sh && yarn && yarn start"

  # extends server, is made for live developing
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_UID: $UID
        SETUP_MODE: dev

    env_file:
      - docker/.env

    # On Linux, this will prevent new files getting created as root, but you
    # may need to update the USER_UID and USER_GID in `Dockerfile` to match
    # your user if not 1000.
    user: $UID

    volumes:
      #* same as service: server
      - .:/work

      # let's us run docker & docker compose from inside container (used for yarn setup)
      - /var/run/docker.sock:/var/run/docker.sock
      - nm_root:/work/node_modules
      - nm_app_client:/work/@app/client/node_modules
      - nm_app_config:/work/@app/config/node_modules
      - nm_app_db:/work/@app/db/node_modules
      - nm_app_e2e:/work/@app/e2e/node_modules
      - nm_app_graphql:/work/@/appgraphqlgenerated/node_modules
      - nm_app_server:/work/@app/server/node_modules
      - nm_app_worker:/work/@app/worker/node_modules

      #* You may want to enable following lines
      #* to use your local configs inside container
      ## avoids vscode extensions reinstalls
      ## https://code.visualstudio.com/docs/remote/containers-advanced#_avoiding-extension-reinstalls-on-container-rebuild
      # - vscode-extensions:/root/.vscode-server
      #! LINUX HOST ONLY
      ## copies your ssh credentials, to be able to use them from within the container
      ## (see: https://code.visualstudio.com/docs/remote/containers#_sharing-git-credentials-with-your-container)
      # - $HOME/.ssh:/root/.home-localhost/.ssh:ro
      ## .bashrc
      # - $HOME/.bashrc:/root/.home-localhost/.bashrc:ro
      ## .gitconfig
      # - $HOME/.gitconfig:/root/.home-localhost/.gitconfig:ro
      ## .tmux
      # - $HOME/tmux.conf:/root/.home-localhost/tmux.conf:ro
      ##! WINDOWS HOST ONLY
      ##* on windows host can't mount single files
      ## comment all the other `.home-localhost` lines above this
      # - $HOME:/root/.home-localhost:ro

    working_dir: /work
    ports:
      # The main server
      - "5678:5678"
      # Node `--inspect=...` port numbers for debugging
      - "9678:9678"
      - "9876:9876"
      - "9757:9757"
    depends_on:
      - db
    # Overrides default command so things don't shut down after the process ends.
    command: sh -c "./docker/scripts/lsfix.sh && sleep infinity"

  # This runs the database that everything else connects to
  db:
    image: postgres:latest
    env_file:
      - docker/.env

    # Unlike above, the Postgres image cannot start as our user account
    # otherwise we get permission denied errors. So this one has to run as
    # root. :(
    #
    # user: $UID

    working_dir: /

    volumes:
      # docker volume rm starter_db-volume
      - db-volume:/var/lib/postgresql/data
      - ./data:/data
    ports:
      - "6543:5432"
    restart: unless-stopped
    command:
      postgres -c logging_collector=on -c log_destination=stderr -c log_directory=/var/lib/postgresql/data/logs -c
      log_rotation_age=60 -c log_truncate_on_rotation=on -c log_filename=server_log.hour.%H%M

  pgadmin:
    image: dpage/pgadmin4
    volumes:
      - pgadmin_data:/var/lib/pgadmin:rw
    ports:
      - 5050:80 # http://localhost:5050/
    env_file:
      - docker/.env
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
    command:
      - "/bin/sh"
      - "-c"
      - >
        set -e && export DB_REGEX='^postgres://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+)$' && if [[ "$$ROOT_DATABASE_URL" =~
        $$DB_REGEX ]]; then
          DB_USER="$${BASH_REMATCH[1]}"
          DB_PASS="$${BASH_REMATCH[2]}"
          DB_HOST="db"
          DB_PORT="5432"
          DB_NAME="$${BASH_REMATCH[5]}"
        else
          echo "Error: ROOT_DATABASE_URL does not match expected format"
          exit 1
        fi && /bin/echo "$${DB_HOST}:$${DB_PORT}:*:$${DB_USER}:$${DB_PASS}" > /tmp/pgpassfile && /bin/echo '{
          "Servers": {
            "1": {
              "Name": "myservername",
              "Group": "Servers",
              "Host": "'$$DB_HOST'",
              "Port": '$$DB_PORT',
              "MaintenanceDB": "postgres",
              "Username": "'$$DB_USER'",
              "SSLMode": "prefer",
              "PassFile": "/tmp/pgpassfile"
            }
          }
        }' > /pgadmin4/servers.json && echo "======== /tmp/pgpassfile ========" && cat /tmp/pgpassfile && echo "========
        /pgadmin4/servers.json ========" && cat /pgadmin4/servers.json && entrypoint.sh

volumes:
  # Postgres' data
  db-volume:

  pgadmin_data:

  # Node modules
  nm_root:
  nm_app_client:
  nm_app_config:
  nm_app_db:
  nm_app_e2e:
  nm_app_graphql:
  nm_app_server:
  nm_app_worker:
  # used for keeeping vscode-extensions while rebuilding
  # vscode-extensions:
