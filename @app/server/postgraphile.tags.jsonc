/* This should be JSON5, but we chose JSONC for VSCode compatibility. */
/*
 * This file contains your Smart Tags, allowing you to "tag" database entities
 * in order to customise how your GraphQL schema is generated. If you prefer,
 * you can use Smart Comments in the database, or you can use both.
 *
 * See https://www.graphile.org/postgraphile/smart-tags/ for more information.
 */
{
  "$schema": "https://gist.githubusercontent.com/singingwolfboy/a7144db4e24b5d31ba81f28b878a4b51/raw/cd1e371baa41756e02f1d6f36a3dea86388d4084/pg-smart-tags-schema.json",
  "version": 1,
  "config": {
    "class": {
      // Equivalent to:
      // COMMENT ON TABLE app_public.users IS E'@omit all\nA user who can log in to the application.';
      "app_public.users": {
        "tags": {
          /*
           * By doing `@omit all` we prevent the `allUsers` field from appearing in
           * our GraphQL schema. User discovery is still possible by browsing the
           * rest of the data, but it makes it harder for people to receive a
           * `totalCount` of users, or enumerate them fully. Of course if you
           * really care about this, you'd use something like uuid or maybe a
           * feistel cipher to make it harder to determine a ceiling from the user
           * id.
           */
          "omit": "all"
        },
        "description": "A user who can log in to the application."
      },
      "app_public.organizations": {
        "tags": {
          "omit": "create,delete"
        }
      },
      "app_public.organization_invitations": {
        "tags": {
          // We are not omitting this table, because we will want to see the
          // list of invited users in future.
        },
        "constraint": {
          "organization_invitations_organization_id_email_key": {
            "tags": {
              "omit": true
            }
          },
          "organization_invitations_organization_id_user_id_key": {
            "tags": {
              "omit": true
            }
          }
        }
      },
      "app_public.organization_memberships": {
        "tags": {
          "omit": "all"
        },
        "constraint": {
          "organization_memberships_organization_id_user_id_key": {
            "tags": {
              "omit": true
            }
          }
        }
      },
      "app_public.user_emails": {
        "tags": {
          /*
           * `@omit all` because there's no point exposing `allUserEmails` -
           * you can only see your own, and having this behaviour can lead to
           * bad practices from frontend teams.
           */
          "omit": "all"
        },
        "constraint": {
          "user_emails_pkey": {
            "tags": {
              "omit": "all"
            }
          },
          "user_emails_user_id_email_key": {
            "tags": {
              // We don't need custom finders/relations for this
              "omit": true
            }
          }
        }
      },
      "app_public.user_authentications": {
        "tags": {
          "omit": "all",
          "simpleCollections": "only"
        },
        "attribute": {
          "details": {
            "tags": {
              "omit": true
            }
          }
        },
        "constraint": {
          "uniq_user_authentications": {
            "tags": {
              "omit": true
            }
          },
          "user_authentications_pkey": {
            "tags": {
              "omit": "all"
            }
          }
        }
      }
    },
    "procedure": {
      // We've put this in public, but omitted it, because it's often useful for debugging auth issues.
      "app_public.current_session_id": {
        "tags": {
          "omit": true
        }
      },
      "app_public.current_user_id": {
        "tags": {
          "omit": true
        }
      },
      "app_public.current_user_invited_organization_ids": {
        "tags": {
          "omit": true
        }
      },
      "app_public.current_user_member_organization_ids": {
        "tags": {
          "omit": true
        }
      },
      "app_public.logout": {
        "tags": {
          // We add our own logout method, so we don't want to expose this via GraphQL
          "omit": true
        }
      },
      "app_public.change_password": {
        "tags": {
          "resultFieldName": "success"
        }
      },
      "app_public.request_account_deletion": {
        "tags": {
          "resultFieldName": "success"
        }
      },
      "app_public.confirm_account_deletion": {
        "tags": {
          "resultFieldName": "success"
        }
      },
      "app_public.resend_email_verification_code": {
        "tags": {
          "resultFieldName": "success"
        }
      },
      "app_public.verify_email": {
        "tags": {
          "resultFieldName": "success"
        }
      },
      "app_public.create_organization": {
        "description": "An `Organization` is a great way of sharing access to resources between multiple users without compromising security. When you create an organization you will have the 'owner' and 'billing contact' roles. You may invite other users and redistribute these roles."
      },
      "app_public.organization_for_invitation": {
        "description": "Given an invitation UUID (and, if required, the code that was emailed to you), retrieves the `Organization` that you were invited to."
      },
      "app_public.invite_to_organization": {
        "description": "You may invite a user to your organization either by their username (only for verified users) or by their email. If you opt to invite by email then an email will be sent to this person containing a code that they need to accept the invitation. If the person doesn't already have an account they will be instructed to create one; their account need not have the email address that you invited listed as the secret code is confirmation enough."
      },
      "app_public.accept_invitation_to_organization": {
        "description": "If someone invited you by your email address then you must include the code that was emailed to you, otherwise you may accept the invitation directly using the UUID. If successful, you will be a member of the organization."
      },
      "app_public.transfer_organization_billing_contact": {
        "description": "The owner of an `Organization` may use this mutation to make any organization member the billing contact."
      },
      "app_public.transfer_organization_ownership": {
        "description": "The owner of an `Organization` may use this mutation to transfer ownership to a different organization member. Take care, if you assign ownership to someone who cannot or will not access their account then you may need to contact support to have ownership reassigned."
      },
      "app_public.remove_from_organization": {
        "description": "The owner of an `Organization` may remove an `OrganizationMember` with this mutation."
      },
      "app_public.delete_organization": {
        "description": "Only the 'owner' may delete an organization. This operation cannot be undone, so be sure that it is what you intend."
      }
    }
  }
}
