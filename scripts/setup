#!/usr/bin/env bash

echo "Setup graphile-starter:"
set -e
export NODE_ENV=development

if [ ! -f ./package.json ]; then
  echo "Please run via 'yarn setup'; do not call this script directly" >&2
  exit 1
fi

if [ -f ./.envvar ]; then
  echo "Using existing .envvar"
  . ./.envvar

  fail () {
    echo ".envvar already exists, but it doesn't define $1 - aborting!"
    exit 1;
  }

  if [ "$DATABASE_HOST" = "" ]; then fail DATABASE_HOST; fi;
  if [ "$DATABASE_OWNER" = "" ]; then fail DATABASE_OWNER; fi;
  if [ "$DATABASE_OWNER_PASSWORD" = "" ]; then fail DATABASE_OWNER_PASSWORD; fi;
  if [ "$DATABASE_AUTHENTICATOR" = "" ]; then fail DATABASE_AUTHENTICATOR; fi;
  if [ "$DATABASE_AUTHENTICATOR_PASSWORD" = "" ]; then fail DATABASE_AUTHENTICATOR_PASSWORD; fi;

  echo "Configuration already exists, using existing secrets."
else

  echo
  echo
  echo "What would you like to call your database? [Enter for 'graphile_starter']"
  read DATABASE_NAME
  if [ "$DATABASE_NAME" = "" ]; then DATABASE_NAME="graphile_starter"; fi
  if [[ "$DATABASE_NAME" =~ ^[a-z][a-z0-9_]+$ ]]; then
    echo "Database name '${DATABASE_NAME}' looks okay"
  else
    echo "Invalid DATABASE_NAME: '${DATABASE_NAME}' - must be lower case alphanumeric" >&2
    exit 3
  fi

  if [ "$DATABASE_HOST" = "" ]; then
    echo
    echo
    echo "What's the hostname of your database server (include :port if it's not the default :5432)? [Enter for 'localhost']"
    read DATABASE_HOST
    if [ "$DATABASE_HOST" = "" ]; then DATABASE_HOST="localhost"; fi
  fi

  if [ "$ROOT_DATABASE_URL" = "" ]; then
    echo
    echo
    DEFAULT_HOST="$DATABASE_HOST"
    if [ "$DEFAULT_HOST" = "localhost" ]; then
      DEFAULT_HOST=""
    fi
    echo "Please enter a superuser connection string to the database server (so we can drop/create the '${DATABASE_NAME}' and '${DATABASE_NAME}_shadow' databases) - IMPORTANT: it must not be a connection to the '${DATABASE_NAME}' database itself, instead try 'template1': [Enter for 'postgres://${DEFAULT_HOST}/template1']"
    read ROOT_DATABASE_URL
    if [ "$ROOT_DATABASE_URL" = "" ]; then ROOT_DATABASE_URL="postgres://${DEFAULT_HOST}/template1"; fi
  fi


  # This will generate passwords that are safe to use in envvars without needing to be escaped:
  DATABASE_OWNER="${DATABASE_NAME}"
  DATABASE_OWNER_PASSWORD="$(openssl rand -base64 30 | tr '+/' '-_')"
  DATABASE_AUTHENTICATOR="${DATABASE_NAME}_authenticator"
  DATABASE_AUTHENTICATOR_PASSWORD="$(openssl rand -base64 30 | tr '+/' '-_')"
  DATABASE_VISITOR="${DATABASE_NAME}_visitor"

  q_mid=\'\\\'\'

  # This is our '.envvar' config file, we're writing it now so that if something goes wrong we won't lose the passwords.
  cat >> .envvar <<CONFIG
# If you're supporting PostGraphile's development via Patreon or Graphile
# Store, add your license key from https://store.graphile.com here so you can
# use the Pro plugin - thanks so much!
export GRAPHILE_LICENSE=''

# This is a development environment (production wouldn't write envvars to a file)
export NODE_ENV='development'

# Superuser connection string (to a _different_ database), so databases can be dropped/created (may not be necessary in production)
export ROOT_DATABASE_URL='${ROOT_DATABASE_URL//\'/$q_mid}'

# Where's the DB, and who owns it?
export DATABASE_HOST='${DATABASE_HOST//\'/$q_mid}'
export DATABASE_NAME='${DATABASE_NAME//\'/$q_mid}'
export DATABASE_OWNER='${DATABASE_OWNER//\'/$q_mid}'
export DATABASE_OWNER_PASSWORD='${DATABASE_OWNER_PASSWORD//\'/$q_mid}'


# Password for the '${DATABASE_AUTHENTICATOR}' user, which has very limited
# privileges, but can switch into '${DATABASE_VISITOR}'
export DATABASE_AUTHENTICATOR='${DATABASE_AUTHENTICATOR//\'/$q_mid}'
export DATABASE_AUTHENTICATOR_PASSWORD='${DATABASE_AUTHENTICATOR_PASSWORD//\'/$q_mid}'

# Visitor role, cannot be logged into directly
export DATABASE_VISITOR='${DATABASE_VISITOR//\'/$q_mid}'

# This secret is used for signing cookies
export SECRET='$(openssl rand -base64 48)'

# This secret is used for signing JWT tokens (we don't use this by default)
export JWT_SECRET='$(openssl rand -base64 48)'

# These are the connection strings for the DB and the test DB.
# NOTE: in production you probably want to add ?ssl=1 to force SSL usage.
# NOTE: 'psql' does not like ?ssl=1, use ?sslmode=require for psql.
export DATABASE_URL="postgres://\$DATABASE_OWNER:\$DATABASE_OWNER_PASSWORD@\$DATABASE_HOST/\${DATABASE_NAME}"
export AUTH_DATABASE_URL="postgres://\${DATABASE_AUTHENTICATOR}:\$DATABASE_AUTHENTICATOR_PASSWORD@\$DATABASE_HOST/\${DATABASE_NAME}"
export SHADOW_DATABASE_URL="postgres://\$DATABASE_OWNER:\$DATABASE_OWNER_PASSWORD@\$DATABASE_HOST/\${DATABASE_NAME}_shadow"
export SHADOW_AUTH_DATABASE_URL="postgres://\${DATABASE_AUTHENTICATOR}:\$DATABASE_AUTHENTICATOR_PASSWORD@\$DATABASE_HOST/\${DATABASE_NAME}_shadow"
export TEST_DATABASE_URL="postgres://\$DATABASE_OWNER:\$DATABASE_OWNER_PASSWORD@\$DATABASE_HOST/\${DATABASE_NAME}_test"

# This port is the one you'll connect to
export PORT=5678

# This is needed any time we use absolute URLs, e.g. for OAuth callback URLs
export ROOT_DOMAIN="localhost:\$PORT"
export ROOT_URL="http://\$ROOT_DOMAIN"

# To enable login with GitHub, create a GitHub application by visiting
# https://github.com/settings/applications/new and then enter the Client
# ID/Secret below
#
#   Name: PostGraphile Starter (Dev)
#   Homepage URL: http://localhost:5678
#   Authorization callback URL: http://localhost:5678/auth/github/callback
#
# Client ID:
export GITHUB_KEY=''
# Client Secret:
export GITHUB_SECRET=''

CONFIG

  echo "Passwords generated and configuration written to .envvar"
  . .envvar
fi

echo
echo
echo "Installing dependencies and performing initial build"

yarn
yarn server:src:build

cat <<MSG
We're going to drop (if necessary):

- database ${DATABASE_NAME}
- database ${DATABASE_NAME}_shadow
- database role ${DATABASE_VISITOR} (cascade)
- database role ${DATABASE_AUTHENTICATOR} (cascade)
- database role ${DATABASE_OWNER}
MSG

if [ "$CONFIRM_DROP" = "" ]; then
  echo "Type 'CONFIRM' to continue"
  read CONFIRM_DROP
fi

if [ "$CONFIRM_DROP" != "CONFIRM" ]; then
  echo "You didn't type 'CONFIRM' so we're aborting." >&2
  exit 2;
fi

echo "Installing or reinstalling the roles and database..."

while ! ${PSQL:-psql} "${ROOT_DATABASE_URL}" -c 'select true as "Connection test";'; do
  echo <<MSG

There was an error connecting to the database at '${ROOT_DATABASE_URL}' (or
we couldn't run the 'psql' command?); we'll try again in a second but if this
keeps happening you may want to check your database is running and that we
have the right address.

MSG
  sleep 1
done

# Now we can reset the database
${PSQL:-psql} -X -v ON_ERROR_STOP=1 "${ROOT_DATABASE_URL}" <<SQL
-- RESET database
DROP DATABASE IF EXISTS ${DATABASE_NAME};
DROP DATABASE IF EXISTS ${DATABASE_NAME}_shadow;
DROP DATABASE IF EXISTS ${DATABASE_NAME}_test;
DROP ROLE IF EXISTS ${DATABASE_VISITOR};
DROP ROLE IF EXISTS ${DATABASE_AUTHENTICATOR};
DROP ROLE IF EXISTS ${DATABASE_OWNER};

-- Now to set up the database cleanly:
-- Ref: https://devcenter.heroku.com/articles/heroku-postgresql#connection-permissions

-- This is the root role for the database
CREATE ROLE ${DATABASE_OWNER} WITH LOGIN PASSWORD '${DATABASE_OWNER_PASSWORD}'
  -- IMPORTANT: don't grant SUPERUSER in production, we only need this so we can load the watch fixtures!
  SUPERUSER;

-- This is the no-access role that PostGraphile will run as by default
CREATE ROLE ${DATABASE_AUTHENTICATOR} WITH LOGIN PASSWORD '${DATABASE_AUTHENTICATOR_PASSWORD}' NOINHERIT;

-- This is the role that PostGraphile will switch to (from ${DATABASE_AUTHENTICATOR}) during a GraphQL request
CREATE ROLE ${DATABASE_VISITOR};

-- This enables PostGraphile to switch from ${DATABASE_AUTHENTICATOR} to ${DATABASE_VISITOR}
GRANT ${DATABASE_VISITOR} TO ${DATABASE_AUTHENTICATOR};
SQL

cat <<MSG
We're going to reset migration
MSG
  graphile-migrate reset
  graphile-migrate reset --shadow

echo "âœ… Setup success"
